FINISHED
  uv_loop_t* uv_loop_new(void);
  void uv_loop_delete(uv_loop_t*);
  uv_loop_t* uv_default_loop(void);
  int uv_run (uv_loop_t*);
  void uv_ref(uv_loop_t*);
  void uv_unref(uv_loop_t*);
  void uv_update_time(uv_loop_t*);
  int64_t uv_now(uv_loop_t*);
  uv_err_t uv_last_error(uv_loop_t*);
  const char* uv_strerror(uv_err_t err);
  const char* uv_err_name(uv_err_t err);
  int uv_is_active(uv_handle_t* handle);
  void uv_close(uv_handle_t* handle, uv_close_cb close_cb);
  int uv_listen(uv_stream_t* stream, int backlog, uv_connection_cb cb);
  int uv_accept(uv_stream_t* server, uv_stream_t* client);
  int uv_read_start(uv_stream_t*, uv_alloc_cb alloc_cb,
  int uv_read_stop(uv_stream_t*);
  int uv_write(uv_write_t* req, uv_stream_t* handle,
  int uv_tcp_init(uv_loop_t*, uv_tcp_t* handle);
  int uv_tcp_nodelay(uv_tcp_t* handle, int enable);
  int uv_tcp_keepalive(uv_tcp_t* handle, int enable,
  int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable);
  int uv_tcp_bind(uv_tcp_t* handle, struct sockaddr_in);
  int uv_tcp_bind6(uv_tcp_t* handle, struct sockaddr_in6);
  int uv_tcp_connect(uv_connect_t* req, uv_tcp_t* handle,
  int uv_tcp_connect6(uv_connect_t* req, uv_tcp_t* handle,
  int uv_timer_init(uv_loop_t*, uv_timer_t* timer);
  int uv_timer_start(uv_timer_t* timer, uv_timer_cb cb,
  int uv_timer_stop(uv_timer_t* timer);
  int uv_timer_again(uv_timer_t* timer);
  void uv_timer_set_repeat(uv_timer_t* timer, int64_t repeat);

NOT FINISHED
  int uv_shutdown(uv_shutdown_t* req, uv_stream_t* handle,
  uv_buf_t uv_buf_init(char* base, size_t len);
  size_t uv_strlcpy(char* dst, const char* src, size_t size);
  size_t uv_strlcat(char* dst, const char* src, size_t size);
  int uv_read2_start(uv_stream_t*, uv_alloc_cb alloc_cb,
  int uv_write2(uv_write_t* req, uv_stream_t* handle, uv_buf_t bufs[],
  int uv_tcp_getsockname(uv_tcp_t* handle, struct sockaddr* name,
  int uv_tcp_getpeername(uv_tcp_t* handle, struct sockaddr* name,
  int uv_udp_init(uv_loop_t*, uv_udp_t* handle);
  int uv_udp_bind(uv_udp_t* handle, struct sockaddr_in addr,
  int uv_udp_bind6(uv_udp_t* handle, struct sockaddr_in6 addr,
  int uv_udp_getsockname(uv_udp_t* handle, struct sockaddr* name,
  int uv_udp_set_membership(uv_udp_t* handle,
  int uv_udp_send(uv_udp_send_t* req, uv_udp_t* handle,
  int uv_udp_send6(uv_udp_send_t* req, uv_udp_t* handle,
  int uv_udp_recv_start(uv_udp_t* handle, uv_alloc_cb alloc_cb,
  int uv_udp_recv_stop(uv_udp_t* handle);
  int uv_tty_init(uv_loop_t*, uv_tty_t*, uv_file fd, int readable);
  int uv_tty_set_mode(uv_tty_t*, int mode);
  void uv_tty_reset_mode(void);
  int uv_tty_get_winsize(uv_tty_t*, int* width, int* height);
  uv_handle_type uv_guess_handle(uv_file file);
  int uv_pipe_init(uv_loop_t*, uv_pipe_t* handle, int ipc);
  void uv_pipe_open(uv_pipe_t*, uv_file file);
  int uv_pipe_bind(uv_pipe_t* handle, const char* name);
  void uv_pipe_connect(uv_connect_t* req, uv_pipe_t* handle,
  int uv_prepare_init(uv_loop_t*, uv_prepare_t* prepare);
  int uv_prepare_start(uv_prepare_t* prepare, uv_prepare_cb cb);
  int uv_prepare_stop(uv_prepare_t* prepare);
  int uv_check_init(uv_loop_t*, uv_check_t* check);
  int uv_check_start(uv_check_t* check, uv_check_cb cb);
  int uv_check_stop(uv_check_t* check);
  int uv_idle_init(uv_loop_t*, uv_idle_t* idle);
  int uv_idle_start(uv_idle_t* idle, uv_idle_cb cb);
  int uv_idle_stop(uv_idle_t* idle);
  int uv_async_init(uv_loop_t*, uv_async_t* async,
  int uv_async_send(uv_async_t* async);
  int64_t uv_timer_get_repeat(uv_timer_t* timer);
   int uv_ares_init_options(uv_loop_t*,
  void uv_ares_destroy(uv_loop_t*, ares_channel channel);
  int uv_getaddrinfo(uv_loop_t*, uv_getaddrinfo_t* handle,
  void uv_freeaddrinfo(struct addrinfo* ai);
  int uv_spawn(uv_loop_t*, uv_process_t*,
  int uv_process_kill(uv_process_t*, int signum);
  uv_err_t uv_kill(int pid, int signum);
  int uv_queue_work(uv_loop_t* loop, uv_work_t* req,
  void uv_fs_req_cleanup(uv_fs_t* req);
  int uv_fs_close(uv_loop_t* loop, uv_fs_t* req, uv_file file,
  int uv_fs_open(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_read(uv_loop_t* loop, uv_fs_t* req, uv_file file,
  int uv_fs_unlink(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file file,
  int uv_fs_mkdir(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_rmdir(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_readdir(uv_loop_t* loop, uv_fs_t* req,
  int uv_fs_stat(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_fstat(uv_loop_t* loop, uv_fs_t* req, uv_file file,
  int uv_fs_rename(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_fsync(uv_loop_t* loop, uv_fs_t* req, uv_file file,
  int uv_fs_fdatasync(uv_loop_t* loop, uv_fs_t* req, uv_file file,
  int uv_fs_ftruncate(uv_loop_t* loop, uv_fs_t* req, uv_file file,
  int uv_fs_sendfile(uv_loop_t* loop, uv_fs_t* req, uv_file out_fd,
  int uv_fs_chmod(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_utime(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_futime(uv_loop_t* loop, uv_fs_t* req, uv_file file,
  int uv_fs_lstat(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_link(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_symlink(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_readlink(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_fchmod(uv_loop_t* loop, uv_fs_t* req, uv_file file,
  int uv_fs_chown(uv_loop_t* loop, uv_fs_t* req, const char* path,
  int uv_fs_fchown(uv_loop_t* loop, uv_fs_t* req, uv_file file,
  void uv_loadavg(double avg[3]);
  int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle,
  struct sockaddr_in uv_ip4_addr(const char* ip, int port);
  struct sockaddr_in6 uv_ip6_addr(const char* ip, int port);
  int uv_ip4_name(struct sockaddr_in* src, char* dst, size_t size);
  int uv_ip6_name(struct sockaddr_in6* src, char* dst, size_t size);
  int uv_exepath(char* buffer, size_t* size);
  uint64_t uv_get_free_memory(void);
  uint64_t uv_get_total_memory(void);
  extern uint64_t uv_hrtime(void);
  uv_err_t uv_dlopen(const char* filename, uv_lib_t* library);
  uv_err_t uv_dlclose(uv_lib_t library);
  uv_err_t uv_dlsym(uv_lib_t library, const char* name, void** ptr);
  int uv_mutex_init(uv_mutex_t* handle);
  void uv_mutex_destroy(uv_mutex_t* handle);
  void uv_mutex_lock(uv_mutex_t* handle);
  int uv_mutex_trylock(uv_mutex_t* handle);
  void uv_mutex_unlock(uv_mutex_t* handle);
  int uv_rwlock_init(uv_rwlock_t* rwlock);
  void uv_rwlock_destroy(uv_rwlock_t* rwlock);
  void uv_rwlock_rdlock(uv_rwlock_t* rwlock);
  int uv_rwlock_tryrdlock(uv_rwlock_t* rwlock);
  void uv_rwlock_rdunlock(uv_rwlock_t* rwlock);
  void uv_rwlock_wrlock(uv_rwlock_t* rwlock);
  int uv_rwlock_trywrlock(uv_rwlock_t* rwlock);
  void uv_rwlock_wrunlock(uv_rwlock_t* rwlock);
  int uv_thread_create(uv_thread_t *tid,
  int uv_thread_join(uv_thread_t *tid);

